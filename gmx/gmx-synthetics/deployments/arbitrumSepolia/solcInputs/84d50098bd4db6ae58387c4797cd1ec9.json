{
  "language": "Solidity",
  "sources": {
    "contracts/mock/MockPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../oracle/IPriceFeed.sol\";\n\n// @title MockPriceFeed\n// @dev Mock price feed for testing and testnets\ncontract MockPriceFeed is IPriceFeed {\n    int256 public answer;\n\n    // @dev set answer\n    // @param _answer the answer to set to\n    function setAnswer(int256 _answer) external {\n        answer = _answer;\n    }\n\n    function latestAnswer() external view returns (int256) {\n        return answer;\n    }\n\n    // @dev get the latest data\n    // @return (roundId, answer, startedAt, updatedAt, answeredInRound)\n    function latestRoundData() external view returns (\n        uint80,\n        int256,\n        uint256,\n        uint256,\n        uint80\n    ) {\n        return (\n            uint80(0), // roundId\n            answer, // answer\n            0, // startedAt\n            block.timestamp - 60, // updatedAt\n            uint80(0) // answeredInRound\n        );\n    }\n\n    function description() external pure returns (string memory) {\n        return \"description\";\n    }\n\n    function decimals() external pure returns (uint8) {\n        return 8;\n    }\n}\n"
    },
    "contracts/oracle/IPriceFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// @title IPriceFeed\n// @dev Interface for a price feed\ninterface IPriceFeed {\n    function latestRoundData() external view returns (\n        uint80 roundId,\n        int256 answer,\n        uint256 startedAt,\n        uint256 updatedAt,\n        uint80 answeredInRound\n    );\n\n    function description() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10,
      "details": {
        "constantOptimizer": true
      }
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}