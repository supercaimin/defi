import { impersonateAccount } from "@nomicfoundation/hardhat-network-helpers";

async function main() {
  const data = {
    jsonrpc: "2.0",
    id: 1,
    result: {
      hash: "0xcc429b42c7d42ed527f154705afdf650a2c5610ddf35b69b25cb17c856b1b6ef",
      nonce: "0x2",
      blockHash: "0x9ecfd7a4156ff50376fa9505685a5b51e03c4bc3a5d373136a86c37f6b84bf71",
      blockNumber: "0x71321",
      transactionIndex: "0x0",
      from: "0x6a2b3a13be0c723674bcfd722d4e133b3f356e05",
      to: "0x5e1c080c5fef6032d5576a88f50851af0b3841fe",
      value: "0x0",
      gasPrice: "0x15",
      gas: "0xc65d40",
      maxFeePerGas: "0x15",
      maxPriorityFeePerGas: "0x7",
      input:
        "0x7ebc83f70ce85c25278a546a5b9fd5d8b8b6ef23371815bf85abd2e96a430cff290de3e50000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000020000000000000000000000001b9e25f54225bcdcf347569e38c41ade9bb686e50000000000000000000000000d2437f93fed6ea64ef01ccde385fb1263910c5600000000000000000000000000000000000000000000000000000000000000020000000000000000000000009d44b89eb6fb382b712c562dfafd8825829b422e0000000000000000000000009d44b89eb6fb382b712c562dfafd8825829b422e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000003e000094baebfda9b87680d8e59aa20a3e565126640ee7caeab3cd965e5568b17ee000000000000000000000000000000000000000000000000000000000044316f000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b8000000000000000000000000000000000000000000000000000000006855246100000000000000000000000000000000000000000000000000000000685524610000000000000000000000000000000000000000000000000000721488fda76500000000000000000000000000000000000000000000000000565711e3b6dbba00000000000000000000000000000000000000000000000000000000687cb161000000000000000000000000000000000000000000001671a4c4be1618d9f840000000000000000000000000000000000000000000001671a2ed73efbb90ec00000000000000000000000000000000000000000000001671adec9dcc67d234000000000000000000000000000000000000000000000000000000000000000006c590529117fc44d8e1094b82153f7d46b5d475e35e90cfa93e963db771b73c793eb18742d31d78ef0e2dc416ebf4f11ba155e52fa6d5647b3cc3bfc33d849676b2cad41152d4b61c3ad743c61d8f974ddcc253cd7fd6e3e716bed33eab0059be48c5abce8d04206cefd1c776cd79eceb72e2d17e99cd5f3ebfeb13a6481d02dd4ca8f3442c7a448e1a1e8511342a893ab8243c6f1934c1bd77427a803dafa9ea8a45c3f7c8d7db7edc819fabe697c9017a82854458c00a53e72d5e23716c055b0000000000000000000000000000000000000000000000000000000000000006105af087187d9404620e0f3d6511c68fedb8f942615ad0d6c50b18e9dcdf8b277d8b02077f8a4691ef1d87fa8a44ab73c47eb7ddc66e2ff8182c953e055d1ca26dd7209b56208b89701f81565d4575fb6485f085cc95eb3942406d299c03ec3c0ac43ba751817ae7d0eed330990318cb43fc8148ca1375fc51b57449ceed42ef61190d604240e74f2f736cbfd2267efae1296745c5f1700f67b468173207b8fa79019374ac75df3fce403890335eba804815cd279b875f5a2258d372e36eb10900000000000000000000000000000000000000000000000000000000000003e000094baebfda9b87680d8e59aa20a3e565126640ee7caeab3cd965e5568b17ee000000000000000000000000000000000000000000000000000000000044316f000000000000000000000000000000000000000000000000000000040000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000003000100010001010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000039d9e45394f473ab1f050a1b963e6b05351e52d71e507509ada0c95ed75b8000000000000000000000000000000000000000000000000000000006855246100000000000000000000000000000000000000000000000000000000685524610000000000000000000000000000000000000000000000000000721488fda76500000000000000000000000000000000000000000000000000565711e3b6dbba00000000000000000000000000000000000000000000000000000000687cb161000000000000000000000000000000000000000000001671a4c4be1618d9f840000000000000000000000000000000000000000000001671a2ed73efbb90ec00000000000000000000000000000000000000000000001671adec9dcc67d234000000000000000000000000000000000000000000000000000000000000000006c590529117fc44d8e1094b82153f7d46b5d475e35e90cfa93e963db771b73c793eb18742d31d78ef0e2dc416ebf4f11ba155e52fa6d5647b3cc3bfc33d849676b2cad41152d4b61c3ad743c61d8f974ddcc253cd7fd6e3e716bed33eab0059be48c5abce8d04206cefd1c776cd79eceb72e2d17e99cd5f3ebfeb13a6481d02dd4ca8f3442c7a448e1a1e8511342a893ab8243c6f1934c1bd77427a803dafa9ea8a45c3f7c8d7db7edc819fabe697c9017a82854458c00a53e72d5e23716c055b0000000000000000000000000000000000000000000000000000000000000006105af087187d9404620e0f3d6511c68fedb8f942615ad0d6c50b18e9dcdf8b277d8b02077f8a4691ef1d87fa8a44ab73c47eb7ddc66e2ff8182c953e055d1ca26dd7209b56208b89701f81565d4575fb6485f085cc95eb3942406d299c03ec3c0ac43ba751817ae7d0eed330990318cb43fc8148ca1375fc51b57449ceed42ef61190d604240e74f2f736cbfd2267efae1296745c5f1700f67b468173207b8fa79019374ac75df3fce403890335eba804815cd279b875f5a2258d372e36eb109",
      r: "0xe5f73fd2d976ef283735236e15514fa0701236df76acab8fadcf24c4314c051c",
      s: "0x6f44bff5f15765ea6f367a70ee0631f4a35178d514c7ec236202eac65bf8caa6",
      v: "0x0",
      yParity: "0x0",
      chainId: "0xe35",
      accessList: [],
      type: "0x2",
    },
  };

  await impersonateAccount(data.result.from);
  const signer = await ethers.getSigner(data.result.from);

  const tx = {
    to: data.result.to,
    data: data.result.input,
    value: 0,
  };

  try {
    const result = await signer.call(tx);
    console.log("Call result:", result);
  } catch (e) {
    console.error("Revert reason:", e.message);
  }
}

main().catch((error) => {
  console.error(error);
  process.exit(1);
});
